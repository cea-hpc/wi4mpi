{% include "copyright.c" %} 
#ifndef _GNU_SOURCE                    
#define _GNU_SOURCE                    
#endif                                 
#include <dlfcn.h>                     
#include <stdio.h>                     
#define __mpi_interface_removed__(a,b) /*__mpi_interface_removed__(a,b)/*
/*ompi constante*/                     
int WI4MPI_errhandler_key;             
#if defined(INTEL_INTEL) || defined(INTEL_OMPI) 
    int *A_MPI_UNWEIGHTED;
    int *A_MPI_WEIGHTS_EMPTY;
#endif

#if defined(INTEL_INTEL)
int *  R_MPI_UNWEIGHTED;
int *  R_MPI_WEIGHTS_EMPTY;
#endif 
void debug_printer(const char *, ...); 
{% include "ompi_const.c" %}
#define EXTERN_ALLOCATED 1                                                                               
#if  defined(_MPC) || defined(_OMPI) || defined(_INTEL) 
#include "c2f_f2c.h"
#endif
#include "helper.h"                                                                                      
#include "mappers.h"                                                                                     
__thread int in_w = 0;                                                                                   
int (*local_MPIR_Dup_fn)(A_MPI_Comm oldcomm, int keyval, void *extra_state,                              
                         void *attribute_val_in, void *attribute_val_out,                                
                         int *flag);                                                                     
#if defined(INTEL_INTEL) || defined(INTEL_OMPI) || defined(OMPI_INTEL) || \
  defined(_MPC) || defined(_INTEL)
                                                                                                         
int MPIR_Dup_fn(A_MPI_Comm oldcomm, int keyval, void *extra_state,                                       
                void *attribute_val_in, void *attribute_val_out, int *flag) {                            
  return local_MPIR_Dup_fn(oldcomm, keyval, extra_state, attribute_val_in,                               
                           attribute_val_out, flag);                                                     
}                                                                                                        
#endif
{% include "impi_const.c" %}
#if defined(OMPI_INTEL) ||defined (OMPI_MPC) 
int OMPI_C_MPI_TYPE_NULL_DELETE_FN() {}
int OMPI_C_MPI_TYPE_NULL_COPY_FN() {}
int OMPI_C_MPI_TYPE_DUP_FN() {}
int OMPI_C_MPI_COMM_NULL_DELETE_FN() {}
int OMPI_C_MPI_COMM_NULL_COPY_FN() {}
int OMPI_C_MPI_COMM_DUP_FN() {}
int OMPI_C_MPI_NULL_DELETE_FN() {}
int OMPI_C_MPI_NULL_COPY_FN() {}
int OMPI_C_MPI_DUP_FN() {}
int OMPI_C_MPI_WIN_NULL_DELETE_FN() {}
int OMPI_C_MPI_WIN_NULL_COPY_FN() {}
int OMPI_C_MPI_WIN_DUP_FN() {}
#endif
void wrapper_win_copy_function(R_MPI_Win oldwin, int win_keyval,
                               void *extra_state, void *attribute_val_in,
                               void *attribute_val_out, int *flag) {
  A_MPI_Win win_tmp;
  win_conv_r2a(&win_tmp, &oldwin);

  (ptr_win_copy_fn)(win_tmp, win_keyval, extra_state, attribute_val_in,
                    attribute_val_out, flag);
}


void wrapper_win_delete_function(R_MPI_Win win, int win_keyval,
                                 void *attribute_val, void *extra_state) {
  A_MPI_Win win_tmp;
  win_conv_r2a(&win_tmp, &win);

  (ptr_win_dlt_fn)(win_tmp, win_keyval, attribute_val, extra_state);
}

void wrapper_grequest_query_function(void *extra_state, R_MPI_Status *status) {
  A_MPI_Status status_ltmp;
  A_MPI_Status *status_tmp = &status_ltmp;
  status_prt_conv_r2a(&status_tmp, &status);

  (ptr_grq_query_fn)(extra_state, status_tmp);
}

void wrapper_type_copy_attr_fn(R_MPI_Datatype oldtype, int type_keyval,
                               void *extra_state, void *attribute_val_in,
                               void *attribute_val_out, int *flag) {
  A_MPI_Datatype datatype_tmp;
  datatype_conv_r2a(&datatype_tmp, &oldtype);

  (ptr_type_cpy_attr_fn)(datatype_tmp, type_keyval, extra_state,
                         attribute_val_in, attribute_val_out, flag);
}

void wrapper_type_delete_attr_fn(R_MPI_Datatype datatype, int type_keyval,
                                 void *attribute_val, void *extra_state) {
  A_MPI_Datatype datatype_tmp;
  datatype_conv_r2a(&datatype_tmp, &datatype);

  (ptr_type_dlt_attr_fn)(datatype_tmp, type_keyval, attribute_val, extra_state);
}

void wrapper_user_function(void *invec, void *inoutvec, int *len,
                           R_MPI_Datatype *type) {
  A_MPI_Datatype datatype_tmp;
  datatype_conv_r2a(&datatype_tmp, type);

  (ptr_user_func)(invec, inoutvec, len, &datatype_tmp);
}

static void wrapper_comm_handler_function(R_MPI_Comm *comm, int *err, ...) {
  A_MPI_Comm comm_tmp;
  comm_conv_r2a_static(&comm_tmp, comm);

  (ptr_comm_fn_handler)(&comm_tmp, err, "", NULL);
}

static void wrapper_handler_function(R_MPI_Comm *comm, int *err, ...) {
  A_MPI_Handler_function *hf;
  A_MPI_Comm comm_tmp;
  comm_conv_r2a_static(&comm_tmp, comm);
  communicator_fn_translation_get(comm_tmp, &hf);

  hf(&comm_tmp, err, "", NULL);
}
int print(FILE *stream, const char *format, ...) {
  int ret_status = 0;
#ifdef DEBUG
  va_list args;
  va_start(args, format);
  ret_status = fprintf(stream, format, args);
  va_end(args);
#endif
  return ret_status;
}

typedef struct {
  A_MPI_Copy_function *cp_function;
  A_MPI_Delete_function *del_function;
} myKeyval_functions_t;

typedef struct {
  int keyval;
  myKeyval_functions_t *functions;
  UT_hash_handle hh;
} myKeyval_translation_t;

typedef struct {
  myKeyval_translation_t *table;
  pthread_mutex_t lock;
} myKeyval_translation_table_t;

static myKeyval_translation_table_t myKeyval_table = {
    NULL, PTHREAD_MUTEX_INITIALIZER};

static myKeyval_translation_table_t *get_myKeyval_table() {
  return &myKeyval_table;
}

static inline void myKeyval_read_lock() {
  pthread_mutex_lock(&get_myKeyval_table()->lock);
}

static inline void myKeyval_read_unlock() {
  pthread_mutex_unlock(&get_myKeyval_table()->lock);
}

static inline void myKeyval_write_lock() {
  pthread_mutex_lock(&get_myKeyval_table()->lock);
}

static inline void myKeyval_write_unlock() {
  pthread_mutex_unlock(&get_myKeyval_table()->lock);
}
static void myKeyval_translation_add(int keyval,
                                     myKeyval_functions_t *functions) {
  myKeyval_translation_t *conv;
  conv = malloc(sizeof(myKeyval_translation_t));
  conv->keyval = keyval;
  conv->functions = functions;
  myKeyval_write_lock();
  HASH_ADD_INT(get_myKeyval_table()->table, keyval, conv);
  HASH_FIND_INT(get_myKeyval_table()->table, &keyval, conv);
  assert(conv != NULL);
  print(stderr, "\t\tREGISTER keyval %d -> (%p, %p)\n", keyval,
        functions->cp_function, functions->del_function);
  myKeyval_write_unlock();
}

static myKeyval_functions_t *myKeyval_translation_get(int keyval) {
  myKeyval_functions_t *functions;
  myKeyval_translation_t *conv;
  myKeyval_read_lock();
  HASH_FIND_INT(get_myKeyval_table()->table, &keyval, conv);
  if (conv != NULL) {
    functions = conv->functions;
    print(stderr, "\t\tkeyval %d -> (%p, %p)\n", keyval, functions->cp_function,
          functions->del_function);
  } else {
    return NULL;
  }
  myKeyval_read_unlock();
  return functions;
}

static void myKeyval_translation_del(int keyval) {
  myKeyval_translation_t *conv;
  myKeyval_write_lock();
  HASH_FIND_INT(get_myKeyval_table()->table, &keyval, conv);
  assert(conv != NULL);
  HASH_DEL(get_myKeyval_table()->table, conv);
  print(stderr, "\t\tDELETE keyval %d\n", keyval);
  myKeyval_write_unlock();
  free(conv);
}
static int wrapper_copy_function(R_MPI_Comm comm, int keyval, void *extra_state,
                                 void *attribute_val_in,
                                 void *attribute_val_out, int *flag) {
  A_MPI_Comm comm_tmp;
  comm_conv_r2a(&comm_tmp, &comm);
  A_MPI_Copy_function *ptr_copy_func =
      myKeyval_translation_get(keyval)->cp_function;
  if (*ptr_copy_func==A_MPI_NULL_COPY_FN)
    return A_MPI_SUCCESS;
  int res = (ptr_copy_func)(comm_tmp, keyval, extra_state, attribute_val_in,
                            attribute_val_out, flag);
  ptr_copy_func = NULL;
  return error_code_conv_r2a(res);
}

static int wrapper_delete_function(R_MPI_Comm comm, int keyval,
                                   void *attribute_val, void *extra_state) {
  A_MPI_Comm comm_tmp;
  comm_conv_r2a(&comm_tmp, &comm);
  A_MPI_Delete_function *ptr_delete_func =
      myKeyval_translation_get(keyval)->del_function;
  if (*ptr_delete_func==A_MPI_NULL_DELETE_FN)
    return A_MPI_SUCCESS;
  int res = (ptr_delete_func)(comm_tmp, keyval, attribute_val, extra_state);
  ptr_delete_func = NULL;
  return error_code_conv_r2a(res);
}

int wrapper_datarep_read_conversion_fn(void * userbuf, R_MPI_Datatype datatype, int count, void *filebuf,
        R_MPI_Offset position, void *extra_state)
{
    A_MPI_Datatype datatype_tmp;
    datatype_conv_r2a(&datatype_tmp,&datatype);

    A_MPI_Offset offset_tmp = (A_MPI_Offset) position;
    int ret_tmp = (ptr_read_conversion_fn)(userbuf, datatype_tmp, count, filebuf, offset_tmp, extra_state);
    return ret_tmp;
}

int wrapper_datarep_write_conversion_fn(void * userbuf, R_MPI_Datatype datatype, int count, void *filebuf,
        R_MPI_Offset position, void *extra_state)
{
    A_MPI_Datatype datatype_tmp;
    datatype_conv_r2a(&datatype_tmp,&datatype);
    A_MPI_Offset offset_tmp = (A_MPI_Offset) position;
    int ret_tmp = (ptr_write_conversion_fn)(userbuf, datatype_tmp, count, filebuf, offset_tmp, extra_state);
    return ret_tmp;
}

int wrapper_datarep_extent_fn(R_MPI_Datatype datatype, R_MPI_Aint *file_extent, void* extra_state)
{
    A_MPI_Datatype datatype_tmp;
    datatype_conv_r2a(&datatype_tmp,&datatype);
    A_MPI_Aint *file_extent_tmp = (A_MPI_Aint*) file_extent;
    int ret_tmp = (ptr_extent_fn)(datatype_tmp, file_extent_tmp, extra_state);
    return ret_tmp;
}
