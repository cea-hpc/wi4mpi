#!/bin/bash

############################# Wi4MPI License ###########################
# `04/04/2016`                                                         #
# Copyright or (C) or Copr. Commissariat a l'Energie Atomique          #
#                                                                      #
# IDDN.FR.001.210022.000.S.P.2014.000.10800                            #
# This file is part of the Wi4MPI library.                             #
#                                                                      #
# SPDX-License-Identifier: BSD-3-Clause OR CeCILL-B                    #
#                                                                      #
#                                                                      #
# Authors:                                                             #
#   - Delforge Tony <tony.delforge.tgcc@cea.fr>                        #
#   - Ducrot Vincent <vincent.ducrot.tgcc@cea.fr>                      #
#   - Adrien Cotte <adrien.cotte.tgcc@cea.fr>                          #
#                                                                      #
########################################################################

WI4MPI_GCONFIG=$( readlink -f $(dirname $0)/../etc/wi4mpi.cfg )
WI4MPI_UCONFIG="${HOME}/.wi4mpi.cfg"

progname=$(basename $0)

# Check if WI4MPI_ROOT is set
[[ -z $WI4MPI_ROOT ]] && (>&2 echo "$progname error: please set WI4MPI_ROOT") && exit 1

# Define FLAGS
WI4MPI_CFLAGS="-I${WI4MPI_ROOT}/include"
WI4MPI_CXXFLAGS="-I${WI4MPI_ROOT}/include"
WI4MPI_FCFLAGS="-I${WI4MPI_ROOT}/include -cpp"

## LD_FLAGS - LD Hack - required for "./configure" simple C program ##
# The ld "--as-needed -lmpi" only link libmpi.so if really needed.
# "--push-state" and "--pop-state" is a trick to anly apply "--as-needed" to "-lmpi" option.
# and not affect other libs.
WI4MPI_LDFLAGS="-L${WI4MPI_ROOT}/lib -Wl,--push-state,--as-needed -lmpi -Wl,--pop-state"

case $progname in
    mpicc)
        COMPILER=${WI4MPI_CC}
        COMPILER_SUFFIX=CC
        COMPILER_LANG=C
        WI4MPI_FLAGS=${WI4MPI_CFLAGS}
    ;;
    mpicxx|mpic++)
        COMPILER=${WI4MPI_CXX}
        COMPILER_SUFFIX=CXX
        COMPILER_LANG=C++
        WI4MPI_FLAGS=${WI4MPI_CXXFLAGS}
    ;;
    mpif77|mpif90|mpifort)
        COMPILER=${WI4MPI_FC}
        COMPILER_SUFFIX=FC
        COMPILER_LANG=Fortran
        WI4MPI_FLAGS=${WI4MPI_FCFLAGS}
        # Check if an Intel family compiler is used. If so, add its specific headers, else use GNU ones
        # Reason : 'intel' headers features Fortran 2008 characteristics,
        # that are not handled by GCC (up to 6.x) or PGI compilers.
        if [ `basename $COMPILER` == 'ifort' ]; then
            WI4MPI_FLAGS="-I${WI4MPI_ROOT}/include/intel $WI4MPI_FLAGS"
        else
            WI4MPI_FLAGS="-I${WI4MPI_ROOT}/include/gnu $WI4MPI_FLAGS"
        fi
    ;;
esac

# Check if COMPILER is set
[[ -z $COMPILER ]] && (>&2 echo "$progname error: please set WI4MPI_$COMPILER_SUFFIX") && exit 1

usage() {

    cat <<EOF
Usage: $progname [${progname^^}_OPTION]... SOURCE...

Option:
    -h                          Display the help message.
    -show | -showme             Show all the wrapper-supplied flags.
    -showme:compile             Output the compiler flags that would have been supplied to the C compiler.
    -showme:link                Output the linker flags that would have been supplied to the C compiler.
    -showme:libdirs             List of directories that the wrapper compiler would have provided to the
                                underlying linker to indicate where relevant libraries are located.
    -showme:incdirs             List of directories that the wrapper compiler would have provided to the
                                underlying C compiler to indicate where relevant header files are located.
    -showme:version             Outputs the version number of Wi4MPI.
    -showme:help                Display the help message.
    -show_static                Show all the wrapper-supplied flags for static compile.
    -shared                     Tells the compiler to produce a dynamic shared object instead of an executable.
                                This option is passed to the compiler.
    -c                          Prevents linking. This option is passed to the compiler.
    -static                     Use this option to link the MPI Library statically.
                                This option is passed to the compiler.
    -wi4mpi_static              Use this option to link the MPI Library statically.
                                This option does not affect the default linkage method for other libraries.
    -wi4mpi_default_run_path    Set a default MPI conversion for the user application.
                                Accepted values :
                                  - OMPI
                                  - INTEL
                                  - MPICH
Influencable variables:
  - WI4MPI_$COMPILER_SUFFIX                   $COMPILER_LANG compiler
  - WI4MPI_ROOT                 WI4MPI installation root
  - WI4MPI_RUN_MPI_C_LIB        C MPI implementation library 
                                used at runtime
  - WI4MPI_RUN_MPI_F_LIB        Fortran MPI implementation 
                                library used at runtime
EOF

}

showme() {

cat <<EOF
${COMPILER} ${WI4MPI_FLAGS} ${WI4MPI_LDFLAGS}
EOF

}

showme_link() {

cat <<EOF
${WI4MPI_LDFLAGS}
EOF

}

showme_compile() {

cat <<EOF
${WI4MPI_FLAGS}
EOF

}

showme_libdirs() {

cat <<EOF
${WI4MPI_ROOT}/lib
EOF

}

showme_incdirs() {

cat <<EOF
${WI4MPI_ROOT}/include
EOF

}

showme_static() {

cat <<EOF
${COMPILER} ${WI4MPI_FLAGS} ${WI4MPI_ROOT}/lib/libmpi.a
EOF

}

showme_version() {

cat <<EOF
Wi4MPI-${WI4MPI_VERSION}
EOF

}

showme_help() {
    usage
}

default_mode() {
    
    echo "char wi4mpi_mode[]=\"$wi4mpi_mode\";" > wi4mpi_libs_default_paths.c
    echo "char wi4mpi_mode_f[]=\"$wi4mpi_mode_f\";" >> wi4mpi_libs_default_paths.c

}

source_default_mode() {
    
    echo "export WI4MPI_RUN_MPI_C_LIB=\"$WI4MPI_RUN_MPI_C_LIB\"" > run_settings.sh
    echo "export WI4MPI_RUN_MPI_F_LIB=\"$WI4MPI_RUN_MPI_F_LIB\"" >> run_settings.sh
    echo $LD_LIBRARY_PATH
    echo "export OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH"                  >> run_settings.sh
    echo "export LD_LIBRARY_PATH=$WI4MPI_ROOT/lib:$LD_LIBRARY_PATH" >> run_settings.sh

    echo "Please source run_settings.sh to export WI4MPI_RUN_MPI_C_LIB, WI4MPI_RUN_MPI_F_LIB and LD_LIBRARY_PATH ;)"
    echo "To retrieve an healthy environment:"
    echo "unset WI4MPI_RUN_MPI_C_LIB"
    echo "unset WI4MPI_RUN_MPI_F_LIB"
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

}

arg=()
default_mode_activated=0
static_compilation=0
[[ -f $WI4MPI_GCONFIG ]] && source $WI4MPI_GCONFIG
[[ -f $WI4MPI_UCONFIG ]] && source $WI4MPI_UCONFIG

#wi4mpi_mode and wi4mpi_mode_f are set by WI4MPI_ROOT/etc/wi4mpi.cfg
wi4mpi_run_c_library=$WI4MPI_RUN_MPI_C_LIB;  
wi4mpi_run_f_library=$WI4MPI_RUN_MPI_F_LIB;  

while [[ $# -ge 1 ]]
do
key=$1

case $key in
    -h | --help)
        usage; exit 0;;
    -show )
        showme; exit 0;;
    -show_static )
        showme_static; exit 0;;
    -wi4mpi_default_run_path )
        if [[ $default_mode_activated -eq 0 ]]; then
            default_mode_activated=1
            #exclude -wi4mpi_default_run_path from arg list passed to COMPILER
            #Testing the argument after the option -wi4mpi_default_run_path
            if [[ "$2" == "OMPI" ]]; then
                wi4mpi_mode=$WI4MPI_ROOT/lib_$2/libwi4mpi_OMPI.so
                wi4mpi_mode_f=$WI4MPI_ROOT/lib_$2/libwi4mpi_OMPI.so
                WI4MPI_RUN_MPI_C_LIB=${WI4MPI_RUN_MPI_C_LIB:-${OPENMPI_DEFAULT_ROOT}/lib/libmpi.so}
                WI4MPI_RUN_MPI_F_LIB=${WI4MPI_RUN_MPI_F_LIB:-${OPENMPI_DEFAULT_ROOT}/lib/libmpi_mpifh.so}
            elif [[ "$2" == "INTEL" ]]; then
                wi4mpi_mode=$WI4MPI_ROOT/lib_$2/libwi4mpi_INTEL.so
                wi4mpi_mode_f=$WI4MPI_ROOT/lib_$2/libwi4mpi_INTEL.so
                WI4MPI_RUN_MPI_C_LIB=${WI4MPI_RUN_MPI_C_LIB:-${INTELMPI_DEFAULT_ROOT}/lib64/libmpi.so}
                WI4MPI_RUN_MPI_F_LIB=${WI4MPI_RUN_MPI_F_LIB:-${INTELMPI_DEFAULT_ROOT}/lib64/libmpifort.so}
            elif [[ "$2" == "MPICH" ]]; then
                wi4mpi_mode=$WI4MPI_ROOT/lib_$2/libwi4mpi_MPICH.so
                wi4mpi_mode_f=$WI4MPI_ROOT/lib_$2/libwi4mpi_MPICH.so
                WI4MPI_RUN_MPI_C_LIB=${WI4MPI_RUN_MPI_C_LIB:-${MPICH_DEFAULT_ROOT}/lib64/libmpi.so}
                WI4MPI_RUN_MPI_F_LIB=${WI4MPI_RUN_MPI_F_LIB:-${MPICH_DEFAULT_ROOT}/lib64/libmpifort.so}
            else
                usage; exit 0;
            fi
            shift
        fi
        ;;
    -shared )
        arg=( "${arg[@]}" "$1" )
        default_mode_activated=-1;;
    -c )
        arg=( "${arg[@]}" "$1" )
        default_mode_activated=-1;;
    -static )
        arg=( "${arg[@]}" "$1" )
        default_mode_activated=-1;;
    -wi4mpi_static )
        default_mode_activated=-1
        static_compilation=1;;
    -showme )
        showme; exit 0
        ;;
    -showme:link )
        showme_link; exit 0
        ;;
    -showme:compile )
        showme_compile; exit 0
        ;;
    -showme:libdirs )
        showme_libdirs; exit 0
        ;;
    -showme:incdirs )
        showme_incdirs; exit 0
        ;;
    -showme:version )
        showme_version; exit 0
        ;;
    -showme:help )
        showme_help; exit 0
        ;;
    *)
        arg=( "${arg[@]}" "$1" )
    ;;
esac
shift
done
extra_arg=""
if [[ default_mode_activated -eq 1 ]];then
    default_mode
    ${COMPILER} -c wi4mpi_libs_default_paths.c -o wi4mpi_libs_default_paths.o
    extra_arg=wi4mpi_libs_default_paths.o
    source_default_mode
fi
if [[ static_compilation -eq 0 ]];then
${COMPILER}  "${arg[@]}" $extra_arg -ldl ${WI4MPI_FLAGS} ${WI4MPI_LDFLAGS}
else
${COMPILER} ${WI4MPI_FLAGS} "${arg[@]}" $extra_arg ${WI4MPI_ROOT}/lib/libmpi.a
fi
exit $?
